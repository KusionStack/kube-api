/*
Copyright 2024 The KusionStack Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kusionstack.io/kube-api/apps/v1alpha1"
	scheme "kusionstack.io/kube-api/pkg/generated/clientset/versioned/scheme"
)

// ResourceContextsGetter has a method to return a ResourceContextInterface.
// A group's client should implement this interface.
type ResourceContextsGetter interface {
	ResourceContexts(namespace string) ResourceContextInterface
}

// ResourceContextInterface has methods to work with ResourceContext resources.
type ResourceContextInterface interface {
	Create(ctx context.Context, resourceContext *v1alpha1.ResourceContext, opts v1.CreateOptions) (*v1alpha1.ResourceContext, error)
	Update(ctx context.Context, resourceContext *v1alpha1.ResourceContext, opts v1.UpdateOptions) (*v1alpha1.ResourceContext, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.ResourceContext, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ResourceContextList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ResourceContext, err error)
	ResourceContextExpansion
}

// resourceContexts implements ResourceContextInterface
type resourceContexts struct {
	client rest.Interface
	ns     string
}

// newResourceContexts returns a ResourceContexts
func newResourceContexts(c *AppsV1alpha1Client, namespace string) *resourceContexts {
	return &resourceContexts{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the resourceContext, and returns the corresponding resourceContext object, and an error if there is any.
func (c *resourceContexts) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ResourceContext, err error) {
	result = &v1alpha1.ResourceContext{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("resourcecontexts").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ResourceContexts that match those selectors.
func (c *resourceContexts) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ResourceContextList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.ResourceContextList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("resourcecontexts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested resourceContexts.
func (c *resourceContexts) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("resourcecontexts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a resourceContext and creates it.  Returns the server's representation of the resourceContext, and an error, if there is any.
func (c *resourceContexts) Create(ctx context.Context, resourceContext *v1alpha1.ResourceContext, opts v1.CreateOptions) (result *v1alpha1.ResourceContext, err error) {
	result = &v1alpha1.ResourceContext{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("resourcecontexts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(resourceContext).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a resourceContext and updates it. Returns the server's representation of the resourceContext, and an error, if there is any.
func (c *resourceContexts) Update(ctx context.Context, resourceContext *v1alpha1.ResourceContext, opts v1.UpdateOptions) (result *v1alpha1.ResourceContext, err error) {
	result = &v1alpha1.ResourceContext{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("resourcecontexts").
		Name(resourceContext.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(resourceContext).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the resourceContext and deletes it. Returns an error if one occurs.
func (c *resourceContexts) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("resourcecontexts").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *resourceContexts) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("resourcecontexts").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched resourceContext.
func (c *resourceContexts) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ResourceContext, err error) {
	result = &v1alpha1.ResourceContext{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("resourcecontexts").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
